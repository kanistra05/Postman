{
	"info": {
		"_postman_id": "77b8172c-12a2-431b-8faa-6db708c9ddcd",
		"name": "Postman_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Проверить, что в body приходит правильный string.",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/first",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"test manula_name\", function () {",
							"    pm.expect(jsonData.name).to.eql('Paulo');",
							"});",
							"",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"test manula_age\", function () {",
							"    pm.expect(jsonData.age).to.eql('42');",
							"});",
							"",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"test manula_salary\", function () {",
							"    pm.expect(jsonData.salary).to.eql(2000);",
							"});",
							"",
							"// 7. Спарсить request.",
							"let reqBody = request.data;",
							"",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"test req_name\", function () {",
							"    pm.expect(jsonData.name).to.eql(reqBody.name);",
							"});",
							"",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"test req_age\", function () {",
							"    pm.expect(jsonData.age).to.eql(reqBody.age);",
							"});",
							"",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"let salary_req = parseInt(reqBody.salary)",
							"pm.test(\"test req_salary\", function () {",
							"    pm.expect(salary_req).to.eql(jsonData.salary);",
							"})",
							"",
							"// 11. Вывести в консоль параметр family из response.",
							"console.log(jsonData.family)",
							"",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"test req_salary_1_5_year\", function () {",
							"    pm.expect(salary_req * 4).to.eql(jsonData.family.u_salary_1_5_year);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"",
							"//4. Спарсить request.",
							"let reqBody = pm.request.url.query.toObject()",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"test name\", function () {",
							"    pm.expect(jsonData.name).to.eql(reqBody.name);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"test age\", function () {",
							"    pm.expect(jsonData.age).to.eql(reqBody.age);",
							"});",
							"",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"test salary\", function () {",
							"    let salary_req = parseInt(reqBody.salary)",
							"    pm.expect(jsonData.salary).to.eql(salary_req);",
							"});",
							"",
							"// 8. Вывести в консоль параметр family из response.",
							"console.log(jsonData.family)",
							"",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"dog have key name\", function () {",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")",
							"});",
							"",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"dog have key age\", function () {",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")    ",
							"});",
							"",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"name = Luky\", function () {",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"age = 4\", function () {",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"",
							"// 4. Спарсить request.",
							"let req_pars = pm.request.url.query.toObject();",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"test name from request\", function () {",
							"    pm.expect(jsonData.name).to.eql(req_pars.name)",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"test age from request\", function () {",
							"    let req_age = parseInt(req_pars.age)",
							"    pm.expect(jsonData.age).to.eql(req_age)",
							"});",
							"",
							"// 7. Вывести в консоль параметр salary из request.",
							"console.log(req_pars.salary)",
							"",
							"// 8. Вывести в консоль параметр salary из response.",
							"console.log(jsonData.salary)",
							"",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(jsonData.salary[0])",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(jsonData.salary[1])",
							"",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(jsonData.salary[2])",
							"",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"test salary [0]\", function () {",
							"    let salary_req = parseInt(req_pars.salary)",
							"    pm.expect(jsonData.salary[0]).to.eql(salary_req);",
							"});",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"test salary [1]\", function () {",
							"    let salary_req = parseInt(req_pars.salary)",
							"    let salary_resp1 = parseInt(jsonData.salary[1])",
							"    pm.expect(salary_resp1).to.eql(salary_req*2);",
							"});",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"test salary [2]\", function () {",
							"    let salary_req = parseInt(req_pars.salary)",
							"    let salary_resp2 = parseInt(jsonData.salary[2])",
							"    pm.expect(salary_resp2).to.eql(salary_req*3);",
							"});",
							"",
							"// 15. Создать в окружении переменную name",
							"pm.environment.set(\"name\");",
							"",
							"// 16. Создать в окружении переменную age",
							"pm.environment.set(\"age\");",
							"",
							"// 17. Создать в окружении переменную salary",
							"pm.environment.set(\"salary\");",
							"",
							"// 18. Передать в окружение переменную name",
							"let usrer_name = jsonData.name",
							"pm.environment.set(\"name\", usrer_name);",
							"",
							"// 19. Передать в окружение переменную age",
							"let usrer_age = jsonData.age",
							"pm.environment.set(\"age\", usrer_age);",
							"",
							"// 20. Передать в окружение переменную salary",
							"let usrer_salary = jsonData.salary[0]",
							"pm.environment.set(\"salary\", usrer_salary);",
							"",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"let salaryOut = jsonData.salary",
							"",
							"for(let i = 0; i < salaryOut.length; i++){",
							"    console.log(salaryOut[i])",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/object_info_4?name=Paulo&age=42&salary=2000",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Paulo"
						},
						{
							"key": "age",
							"value": "42"
						},
						{
							"key": "salary",
							"value": "2000"
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 6. Спарсить response body в json.",
							"let jsonData = pm.response.json()",
							"// 7. Спарсить request.",
							"let reqBody = request.data",
							"console.log(reqBody)",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"response have key start_qa_salary\", function () {",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\")",
							"});",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"response have key qa_salary_after_6_months\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\")",
							"});",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"response have key qa_salary_after_12_months\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")",
							"});",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"response have key qa_salary_after_1.5_year\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")",
							"});",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"response have key qa_salary_after_3.5_years\", function () {",
							"    // pm.expect(jsonData).to.deep.include.keys(\"qa_salary_after_3.5_years\")",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")",
							"});",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"response have key person\", function () {",
							"    pm.expect(jsonData).to.deep.include.keys(\"person\")",
							"});",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"test start_qa_salary\", function () {",
							"    let salary_req = parseInt(reqBody.salary)",
							"    pm.expect(salary_req).to.eql(jsonData.start_qa_salary);",
							"    console.log(salary_req)",
							"});",
							"",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"test qa_salary_after_6_months\", function () {",
							"    let salary_req = parseInt(reqBody.salary)",
							"    pm.expect(salary_req*2).to.eql(jsonData.qa_salary_after_6_months);",
							"    console.log(salary_req*2)",
							"});",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"test qa_salary_after_12_months\", function () {",
							"    let salary_req = parseInt(reqBody.salary)",
							"    pm.expect(salary_req*2.7).to.eql(jsonData.qa_salary_after_12_months);",
							"    console.log(salary_req*2.7)",
							"});",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"test qa_salary_after_1.5_year\", function () {",
							"    let salary_req = parseInt(reqBody.salary)",
							"    pm.expect(salary_req*3.3).to.eql(jsonData['qa_salary_after_1.5_year']);",
							"});",
							"console.log(jsonData['qa_salary_after_1.5_year'])",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"test qa_salary_after_3.5_years\", function () {",
							"    let salary_req = parseInt(reqBody.salary)",
							"    pm.expect(salary_req*3.8).to.eql(jsonData['qa_salary_after_3.5_years']);",
							"});",
							"console.log(jsonData['qa_salary_after_3.5_years'])",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"test u_name salary\", function () {",
							"    let salary_req = parseInt(reqBody.salary)",
							"    pm.expect(salary_req).to.eql(jsonData.person.u_name[1]);",
							"});",
							"",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"test u_age\", function () {",
							"    let age_req = parseInt(reqBody.age)",
							"    pm.expect(age_req).to.eql(jsonData.person.u_age);",
							"});",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"test u_salary_5_years\", function () {",
							"    let salary_req = parseInt(reqBody.salary)",
							"    pm.expect(salary_req*4.2).to.eql(jsonData.person.u_salary_5_years);",
							"});",
							"console.log(jsonData.person.u_salary_5_years)",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"for( let i in jsonData.person){",
							"    console.log(i)",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}